if 0 | endif

if has("vim_starting")
    if &compatible
        set nocompatible        " Be iMproved
    endif
    set rtp+=~/.vim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc.vim', {
            \   'build': {
            \       'mac': 'make',
            \       'linux': 'make',
            \       'unix': 'gmake',
            \   },
            \}
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'tomasr/molokai'
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'a.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'bufexplorer.zip'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'matchit.zip'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'hynek/vim-python-pep8-indent'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'fatih/vim-go'
"NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'easymotion/vim-easymotion'
NeoBundle 'plasticboy/vim-markdown'
"NeoBundle 'ervandew/supertab'
call neobundle#end()

NeoBundleCheck

syntax enable
filetype plugin indent on

set background=dark
colorscheme molokai

"set t_Co=256
set tabstop=8
set softtabstop=4
set shiftwidth=4
set textwidth=120
set expandtab
set smarttab
set autoindent
set shiftround
set backspace=indent,eol,start

set number
set relativenumber
set nowrap
let &showbreak="> "
set hlsearch
set incsearch
set showcmd
set showmatch
set cursorline
"set cursorcolumn
set scrolloff=3
set laststatus=2
set list
let &listchars="tab:\u00bb\u00bb,trail:\u00b7,nbsp:\u00b7"

set splitbelow
set splitright

set history=1000
if has('persistent_undo')
    set undofile
    set undodir=~/.vim/undo/
    if !isdirectory(&undodir)
        call mkdir(&undodir)
    endif
endif

set hidden
set modeline
set formatoptions=roqnlj
set formatlistpat=^\\s*\\d\\+[.:)]\\s\\+\\\|^\\s*[-*]\\s\\+
set virtualedit=block

set novisualbell
set noerrorbells
set cedit=
set cmdheight=2

set wildmenu
set wildmode=longest:full,full
set wildignore=*.pyc,*.pyo,*.o,*.obj,.*.swp

set foldmethod=marker
set foldnestmax=2

" return to last edit position when opening files
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line('$') | execute "normal! g'\"" | endif

let mapleader=","
let g:mapleader=","

" ,, to repeat last fFtT in opposite direction (use ; to find next)
nnoremap <leader>, ,

" allow moving through windows via <C-j> instead of <C-W>j
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l

" common shortcuts
nmap <leader>w :w<CR>
nmap <leader>wq :wq<CR>
nmap <leader>q :q<CR>
nmap <leader>e :e <C-R>=expand('%:p:h') . '/'<cr><cr>
nmap <leader>v :vsp <C-R>=expand('%:p:h') . '/'<cr><cr>
nmap <leader>s :sp <C-R>=expand('%:p:h') . '/'<cr><cr>
command! W execute 'w !sudo tee %> /dev/null' | execute 'e!' | execute 'set noreadonly'

" Use <C-/> to clear highlighting of hlsearch
nnoremap <silent> <leader>/ :nohlsearch<CR>

" easy (re)indenting in visual mode
vnoremap < <gv
vnoremap > >gv

" reselect pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" tmux re-run last command
nmap <leader>r :call system('tmux select-pane -l; tmux send-keys up enter; tmux select-pane -l')<cr>
nmap <leader>c :call system('tmux select-pane -l; tmux send-keys c-c; tmux select-pane -l')<cr>

" pastetoggle
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>

" airline
let g:airline_theme='ubaryd'

" NERDTree
nmap <leader>nt :NERDTreeToggle <C-R>=expand('%p:%h') . '/'<cr><cr>
let NERDTreeRespectWildIgnore=1
let NERDTreeShowLineNumbers=1

" unite
" let g:unite_source_history_yank_enable = 1
" nnoremap <leader>y :Unite history/yank<CR>
call unite#filters#matcher_default#use(['matcher_fuzzy'])
let g:unite_prompt='Â» '
let g:unite_data_directory='~/.vim/.cache.unite'
call unite#custom#profile('ctrlp', 'context', {
            \ 'start_insert': 1,
            \ 'winheight': 10,
            \ 'direction': 'botright',
            \ 'smartcase': 1,
            \})
nnoremap <leader>p :<C-u>UniteWithProjectDir -profile-name=ctrlp -buffer-name=files file file_mru file_rec/async:!<CR>
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
    imap <buffer> <C-k> <Plug>(unite_select_previous_line)
    imap <buffer> <C-j> <Plug>(unite_select_next_line)
    imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
    nnoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
    inoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
    nnoremap <silent> <buffer> <expr> <C-s> unite#do_action('split')
    inoremap <silent> <buffer> <expr> <C-s> unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction
nnoremap <leader>bu :<C-u>Unite buffer<CR>
nnoremap <leader><space> :<C-u>UniteWithProjectDir grep:.<CR>

" Gundo
nnoremap <leader>u :GundoToggle<CR>

" tagbar
nnoremap <leader>tb :TagbarToggle<CR>

" ctrl-p options
let g:ctrlp_switch_buffer = 'et'
let g:ctrlp_clear_cache_on_exit = 0

" easymotion options
map <space> <Plug>(easymotion-prefix)

" vim-go
let g:go_bin_path = expand("$HOME/.vim/bin")

" tab handling
let g:lasttab = 1
autocmd TabLeave * let g:lasttab = tabpagenr()
if exists("+showtabline")
    function! GotoTab()
        call inputsave()
        let num = input('Enter tab number: ')
        call inputrestore()
        execute 'normal ' . num . 'gt'
    endfunction
    function! SetTabName()
        let name = gettabvar(tabpagenr(), 'custom_tab_name')
        call inputsave()
        let name = input('Enter tab name: ', name)
        call inputrestore()
        settabvar(tabpagenr(), 'custom_tab_name', name)
    endfunction
    function! MyTabLabel(n)
        let name = gettabvar(a:n, 'custom_tab_name')
        if name == ''
            let buflist = tabpagebuflist(a:n)
            let winnr = tabpagewinnr(a:n)
            let bufnr = buflist[winnr - 1]
            let bufname = bufname(bufnr)
            let buftype = getbufvar(bufnr, '&buftype')
            if buftype == 'help'
                let name = '[H] ' . fnamemodify(bufname, ':t:s/.txt$//')
            elseif buftype == 'quickfix'
                let name = '[Q]'
            elseif buftype == 'nofile'
                if bufname =~ '\/.'
                    let name = substitute(bufname, '.*\/\ze.', '', '')
                endif
            else
                let name = fnamemodify(bufname, ':p:t')
            endif
            if bufname == ''
                let name = '[No Name]'
            endif
        endif
        return name
    endfunction

    function! MyTabLine()
        let s = ''
        let t = tabpagenr()
        for i in range(tabpagenr('$'))
            let n = i + 1
            " set tab page number
            let s .= '%' . n . 'T'
            " first space
            let s .= ( n == t ? '%#TabLineSel#' : '%#TabLine#' ) . ' '
            " tab number
            let s .= ( n == t ? '%#TabNumSel#' : '%#TabNum#' ) . n
            " label
            let s .= ( n == t ? '%#TabLineSel#' : '%#TabLine#' ) . ' %{MyTabLabel(' . n . ')} '
        endfor
        let s .= '%#TabLineFill#%T'
        if tabpagenr('$') > 1
            let s .= '%=%999XX'
        endif
        return s
    endfunction
    set tabline=%!MyTabLine()
    set showtabline=1
    highlight link TabNumSel CursorLineNr
    highlight link TabNum Normal
endif
nmap <C-w><C-w> :execute "tabn ".g:lasttab<cr>
nmap <C-w>p gT
nmap <C-w>n gt
nmap <C-w><C-p> gT
nmap <C-w><C-n> gt
nmap H gT
nmap L gt
nmap <C-w>1 1gt
nmap <C-w>2 2gt
nmap <C-w>3 3gt
nmap <C-w>4 4gt
nmap <C-w>5 5gt
nmap <C-w>6 6gt
nmap <C-w>7 7gt
nmap <C-w>8 8gt
nmap <C-w>9 9gt
nmap <C-w>' :execute GotoTab()<cr>
nmap <C-w>c :tabnew<cr>
nmap <C-w>as :AS<cr>
nmap <C-w>av :AV<cr>
nmap <C-w>at :AT<cr>

" cscope
if has("cscope")
    set cscopetag
    set csto=0
    if filereadable("cscope.out")
        execute "cscope add cscope.out " . getcwd()
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    set nocscopeverbose
    function! Cscope(search)
        let l:mode = confirm("mode", "&calling\ncalle&d\n&egrep\n&file\n&global\n&including\n&symbol\nassignmen&ts\n&abort", 5)
        if (l:mode == 1)
            let l:mode = 'c'
        elseif (l:mode == 2)
            let l:mode = 'd'
        elseif (l:mode == 3)
            let l:mode = 'e'
        elseif (l:mode == 4)
            let l:mode = 'f'
        elseif (l:mode == 5)
            let l:mode = 'g'
        elseif (l:mode == 6)
            let l:mode = 'i'
        elseif (l:mode == 7)
            let l:mode = 's'
        elseif (l:mode == 8)
            let l:mode = 't'
        else
            return
        endif
        let l:split = confirm("split", "&none\n&horizontal\n&vertical\n&tab\n&abort", 1)
        if (l:split == 1)
            execute "cs find " . l:mode . " " . a:search
        elseif (l:split == 2)
            execute "scs find " . l:mode . " " . a:search
        elseif (l:split == 3)
            execute "vert cs find " . l:mode . " " . a:search
        elseif (l:split == 4)
            execute "tab cs find " . l:mode . " " . a:search
        else
            return
        endif
    endfunction

    nmap <leader>f :call Cscope("<C-R>=expand("<cword>")<cr>")<cr>
endif
